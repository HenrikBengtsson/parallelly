** System information:
List of 12
 $ sysname       : chr "Linux"
 $ release       : chr "5.19.0-35-generic"
 $ version       : chr "#36~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Fri Feb 17 15:17:25 UTC 2"
 $ nodename      : chr "hb-x1-2023"
 $ machine       : chr "x86_64"
 $ login         : chr "henrik"
 $ user          : chr "henrik"
 $ effective_user: chr "henrik"
 $ pid           : int 386457
 $ call          : chr [1:17] "/home/henrik/software/cbi/software/R-4.2.2-gcc11/lib/R/bin/exec/R" "--no-echo" "--no-restore" "-e" "try(suppressWarnings(cat(Sys.getpid(),file=\"/tmp/henrik/Rtmp0H78BI/worker.rank=1.parallelly.parent=386084.5e42"| __truncated__ "-e" "options(socketOptions~+~=~+~\"no-delay\")" "-e" "workRSOCK~+~<-~+~tryCatch(parallel:::.workRSOCK,~+~error=function(e)~+~parallel:::.slaveRSOCK);~+~workRSOCK()" "--args" "MASTER=localhost" "PORT=11315" "OUT=/dev/null" "TIMEOUT=2592000" "XDR=FALSE" "SETUPTIMEOUT=120" "SETUPSTRATEGY=parallel"
 $ pwd           : chr "/tmp/henrik/Rtmpaf6Zkf/parallelly/docs/reference"
 $ time          : POSIXct[1:1], format: "2023-03-22 17:05:16"

** Error:
Error in unserialize(node$con) : error reading from connection
Calls: workRSOCK ... doTryCatch -> recvData -> recvData.SOCK0node -> unserialize


** Traceback:
  1: unserialize(node$con)
  2: recvData.SOCK0node(master)
  3: recvData(master)
  4: doTryCatch(return(expr), name, parentenv, handler)
  5: tryCatchOne(expr, names, parentenv, handlers[[1L]])
  6: tryCatchList(expr, classes, parentenv, handlers)
  7: tryCatch({
         msg <- recvData(master)
         if (msg$type == "DONE") {
             closeNode(master)
             FALSE
         }
         else if (msg$type == "EXEC") {
             success <- TRUE
             handler <- function(e) {
                 success <<- FALSE
                 structure(conditionMessage(e), class = c("snow-try-error", 
                     "try-error"))
             }
             t1 <- proc.time()
             value <- tryCatch(do.call(msg$data$fun, msg$data$args, 
                 quote = TRUE), error = handler)
             t2 <- proc.time()
             value <- list(type = "VALUE", value = value, success = success, 
                 time = t2 - t1, tag = msg$data$tag)
             msg <- NULL
             sendData(master, value)
             value <- NULL
             TRUE
         }
         else {
             TRUE
         }
     }, interrupt = function(e) TRUE)
  8: workCommand(master)
  9: workLoop(makeSOCKmaster(master, port, setup_timeout, timeout, 
         useXDR, setup_strategy))
 10: workRSOCK()

** Dumped frames:
$`workRSOCK()`
<environment: 0x558271c132e8>

$`workLoop(makeSOCKmaster(master, port, setup_timeout, timeout, useXDR, setup`
<environment: 0x558271a6d5a8>

$`workCommand(master)`
<environment: 0x558271a1db60>

$`tryCatch({\n    msg <- recvData(master)\n    if (msg$type == "DONE") {\n        c`
<environment: 0x558271a1dd58>

$`tryCatchList(expr, classes, parentenv, handlers)`
<environment: 0x558271a1e420>

$`tryCatchOne(expr, names, parentenv, handlers[[1]])`
<environment: 0x558271a1e768>

$`doTryCatch(return(expr), name, parentenv, handler)`
<environment: 0x558271a1ad28>

$`recvData(master)`
<environment: 0x558271a1b070>

$`recvData.SOCK0node(master)`
<environment: 0x558271a1b310>

$`unserialize(node$con)`
<environment: 0x558271a1b428>

$`(function () \n{\n    tb <- .traceback(NULL)\n    if (is.null(tb)) \n        tb <- `
<environment: 0x558271a1b8f8>

attr(,"error.message")
[1] "Error in unserialize(node$con) : error reading from connection\nCalls: workRSOCK ... doTryCatch -> recvData -> recvData.SOCK0node -> unserialize\n"
attr(,"class")
[1] "dump.frames"

** Session information:
R version 4.2.2 (2022-10-31)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 22.04.2 LTS

Matrix products: default
BLAS:   /home/henrik/software/cbi/software/R-4.2.2-gcc11/lib/R/lib/libRblas.so
LAPACK: /home/henrik/software/cbi/software/R-4.2.2-gcc11/lib/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=C              
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_4.2.2      parallel_4.2.2      tools_4.2.2        
[4] trackers_0.0.1-9001 rappdirs_0.3.3      digest_0.6.31      
