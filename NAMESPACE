# Generated by roxygen2: do not edit by hand

S3method(as.cluster,RichSOCKnode)
S3method(as.cluster,SOCK0node)
S3method(as.cluster,SOCKnode)
S3method(as.cluster,cluster)
S3method(as.cluster,list)
S3method(c,cluster)
S3method(cloneNode,RichSOCKnode)
S3method(cloneNode,cluster)
S3method(cloneNode,default)
S3method(isForkedNode,cluster)
S3method(isForkedNode,default)
S3method(isForkedNode,forknode)
S3method(isLocalhostNode,RichSOCKnode)
S3method(isLocalhostNode,SOCK0node)
S3method(isLocalhostNode,SOCKnode)
S3method(isLocalhostNode,cluster)
S3method(isLocalhostNode,default)
S3method(isLocalhostNode,forknode)
S3method(isNodeAlive,RichSOCKnode)
S3method(isNodeAlive,cluster)
S3method(isNodeAlive,default)
S3method(killNode,RichSOCKnode)
S3method(killNode,cluster)
S3method(killNode,default)
S3method(print,RichSOCKcluster)
S3method(print,RichSOCKnode)
S3method(stopCluster,RichMPIcluster)
S3method(summary,RichSOCKcluster)
S3method(summary,RichSOCKnode)
export(MPI)
export(PSOCK)
export(as.cluster)
export(autoStopCluster)
export(availableConnections)
export(availableCores)
export(availableWorkers)
export(cloneNode)
export(connectionId)
export(cpuLoad)
export(freeConnections)
export(freeCores)
export(freePort)
export(isConnectionValid)
export(isForkedChild)
export(isForkedNode)
export(isLocalhostNode)
export(isNodeAlive)
export(killNode)
export(makeClusterMPI)
export(makeClusterPSOCK)
export(makeNodePSOCK)
export(serializedSize)
export(supportsMulticore)
if (getRversion() >= "4.4") S3method(print,sequential_cluster)
if (getRversion() >= "4.4") S3method(print,sequential_node)
if (getRversion() >= "4.4") S3method(recvData,sequential_node)
if (getRversion() >= "4.4") S3method(sendData,sequential_node)
if (getRversion() >= "4.4") export(SEQ)
if (getRversion() >= "4.4") export(makeClusterSequential)
if (getRversion() >= "4.4") importFrom(parallel,recvData)
if (getRversion() >= "4.4") importFrom(parallel,sendData)
importFrom(parallel,clusterCall)
importFrom(parallel,detectCores)
importFrom(parallel,makeCluster)
importFrom(parallel,stopCluster)
importFrom(tools,pskill)
importFrom(utils,capture.output)
importFrom(utils,file_test)
importFrom(utils,flush.console)
importFrom(utils,installed.packages)
importFrom(utils,read.table)
importFrom(utils,str)
useDynLib("parallelly", .registration = TRUE, .fixes = "C_")
